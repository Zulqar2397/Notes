https://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/
https://www.geeksforgeeks.org/bottom-view-binary-tree/

/* 
do level order traversal
create a queue object to add horizontal distance along with node
for left node hd=hd-1 i.e -2 or negative
for right node hd=hd+1 i.e 2 or negative
for root hd=0

use a tree map to store hd and element(first element for top view
				      can override for bottom view)
for each hd print the corresponding element


// Java program to print top
// view of binary tree
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.TreeMap;

// class to create a node
class Node {
	int data;
	Node left, right;

	public Node(int data)
	{
		this.data = data;
		left = right = null;
	}
}

// class of binary tree
class BinaryTree {
	Node root;

	public BinaryTree() { root = null; }

	// function should print the topView of
	// the binary tree
	private void TopView(Node root)
	{
		class QueueObj {
			Node node;
			int hd;

			QueueObj(Node node, int hd)
			{
				this.node = node;
				this.hd = hd;
			}
		}
		Queue<QueueObj> q = new LinkedList<QueueObj>();
		Map<Integer, Node> topViewMap
			= new TreeMap<Integer, Node>();

		if (root == null) {
			return;
		}
		else {
			q.add(new QueueObj(root, 0));
		}

		System.out.println(
			"The top view of the tree is : ");

		// count function returns 1 if the container
		// contains an element whose key is equivalent
		// to hd, or returns zero otherwise.
		while (!q.isEmpty()) {
			QueueObj tmpNode = q.poll();
			if (!topViewMap.containsKey(tmpNode.hd)) {     //remove for bottom view coz it will override
				topViewMap.put(tmpNode.hd, tmpNode.node);
			}

			if (tmpNode.node.left != null) {
				q.add(new QueueObj(tmpNode.node.left,
								tmpNode.hd - 1));
			}
			if (tmpNode.node.right != null) {
				q.add(new QueueObj(tmpNode.node.right,
								tmpNode.hd + 1));
			}
		}
		for (Map.Entry<Integer, Node> entry :
			topViewMap.entrySet()) {
			System.out.print(entry.getValue().data);
		}
	}

	// Driver Program to test above functions
	public static void main(String[] args)
	{
		/* Create following Binary Tree
			1
		/ \
		2 3
		\
			4
			\
			5
			\
				6*/
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(1);
		tree.root.left = new Node(2);
		tree.root.right = new Node(3);
		tree.root.left.right = new Node(4);
		tree.root.left.right.right = new Node(5);
		tree.root.left.right.right.right = new Node(6);
		System.out.println(
			"Following are nodes in top view of Binary Tree");
		tree.TopView(tree.root);
	}
}

///bottom

Preorder
Create a map like, map where key is the horizontal distance and value is a pair(a, b) 
where a is the value of the node and b is the height of the node. Perform a pre-order traversal of the tree. 
If the current node at a horizontal distance of h is the first weâ€™ve seen, insert it in the map.
 Otherwise, compare the node with the existing one in map and if the height of the new node is greater, update in the Map.

///////////////
static void printBottomViewUtil(Node root, int curr, int hd,
                                TreeMap<Integer, int[]> m)
{
     
    // Base case
    if (root == null)
        return;
 
    // If node for a particular
    // horizontal distance is not
    // present, add to the map.
    if (!m.containsKey(hd))
    {
        m.put(hd, new int[]{ root.data, curr });
    }
     
    // Compare height for already
    // present node at similar horizontal
    // distance
    else
    {
        int[] p = m.get(hd);
        if (p[1] <= curr)
        {
            p[1] = curr;
            p[0] = root.data;
        }
        m.put(hd, p);
    }
 
    // Recur for left subtree
    printBottomViewUtil(root.left, curr + 1,
                        hd - 1, m);
 
    // Recur for right subtree
    printBottomViewUtil(root.right, curr + 1,
                        hd + 1, m);
}