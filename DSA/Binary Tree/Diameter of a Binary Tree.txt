https://www.geeksforgeeks.org/diameter-of-a-binary-tree/

//brute force On2
The diameter of a tree T is the largest of the following quantities:

the diameter of T’s left subtree.
the diameter of T’s right subtree.
the longest path between leaves that goes through the root of T 
(this can be computed from the heights of the subtrees of T)

 int diameter(Node root)
    {
        // base case if tree is empty
        if (root == null)
            return 0;
 
        // get the height of left and right sub-trees
        int lheight = height(root.left);
        int rheight = height(root.right);
 
        // get the diameter of left and right sub-trees
        int ldiameter = diameter(root.left);
        int rdiameter = diameter(root.right);
 
        /* Return max of following three
          1) Diameter of left subtree
          2) Diameter of right subtree
          3) Height of left subtree + height of right subtree + 1
         */
        return Math.max(lheight + rheight + 1,
                        Math.max(ldiameter, rdiameter));
    }

static int height(Node node)
    {
        // base case tree is empty
        if (node == null)
            return 0;
 
        // If tree is not empty then height = 1 + max of
        //  left height and right heights
        return (1
                + Math.max(height(node.left),
                           height(node.right)));
    }



//O-n approach
.create a variable and add max values to it while finding ht

int dia=0;
int height(Node root){
if (root)== null {return 0;}
int lh=height(root.left);
int rh=height(root.right);
dia= Math.max(dia, (lh+rh+1)); //updating max dia if dia is already> currnt dia(lh+rh+node)
return 1+ Math.max(lh,rh); 