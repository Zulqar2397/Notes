USE HASHMAP WITH LEVEL AS KEY AND A ARRAYLIST AS ELEMENTS
TO STORE ALL THE ELEMENTS OF EACH LEVEL
START WITH 1 LEVEL 
RECURSIVE CALL TO THE LEFT AND RIGHT


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Traverse the tree in a preorder fashion and store nodes in a map
    // corresponding to their level
    public static void preorder(Node root, int level, Map<Integer, List<Integer>> map)
    {
        // base case: empty tree
        if (root == null) {
            return;
        }
 
        // insert the current node and its level into the map
        map.putIfAbsent(level, new ArrayList<>());
        map.get(level).add(root.key);
 
        // recur for the left and right subtree by increasing the level by 1
        preorder(root.left, level + 1, map);
        preorder(root.right, level + 1, map);
    }
 
    // Recursive function to print level order traversal of a given binary tree
    public static void levelOrderTraversal(Node root)
    {
        // create an empty map to store nodes between given levels
        Map<Integer, List<Integer>> map = new HashMap<>();
 
        // traverse the tree and insert its nodes into the map
        // corresponding to their level
        preorder(root, 1, map);
 
        // iterate through the map and print all nodes between given levels
        for (int i = 1; i <= map.size(); i++) {
            System.out.println("Level " + i + ": " + map.get(i));
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(15);
        root.left = new Node(10);
        root.right = new Node(20);
        root.left.left = new Node(8);
        root.left.right = new Node(12);
        root.right.left = new Node(16);
        root.right.right = new Node(25);
        root.right.right.right = new Node(30);
 
        levelOrderTraversal(root);
    }
}