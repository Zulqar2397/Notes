https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/

///////////////////////////////////////////////////////////////
Naive Approach: 
The naive solution is to traverse the given array considering every window in it and
keeping a count on the distinct elements of the window. 

Algorithm: 
time complexity: O(nk2). 
Space Complexity: O(1) No extra space is needed.
For every index i from 0 to len_array(n) – k, i.e n – k, traverse the array from i to i + k. This is the window
Traverse the window, from i to that index and check if the element is present or not.
If the element is not present in the prefix of the array, i.e no duplicate element is present from i to index-1, 
then increase the count.
Print the count.

//////////////////////////////////////////////

Efficient Approach:
So, there is an efficient solution using hashing, though hashing requires extra O(n) space but the time complexity will improve.
The trick is to use the count of the previous window while sliding the window.
To do this a hash map can be used that stores elements of the current window.
The hash-map is also operated on by simultaneous addition and removal of an element while
keeping track of distinct elements. 
he problem deals with finding the count of distinct elements in a window of length k,
at any step while shifting the window and discarding all the computation done in the previous step,
even though k – 1 elements are same from the previous adjacent window.
For example, assume that elements from index i to i + k – 1 are stored in a Hash Map as an element-frequency pair. So, while updating the Hash Map in range i + 1 to i + k, reduce the frequency of the i-th element by 1 and increase the frequency of (i + k)-th element by 1. 
Insertion and deletion from the HashMap takes constant time.

Algorithm: 
Create an empty hash map. Let the hash map be hM.
Initialize the count of distinct elements as dist_count to 0.
Traverse through the first window and insert elements of the first window to hM. 
The elements are used as key and their counts as the value in hM.
Also, keep updating dist_count
Print distinct count for the first window.
Traverse through the remaining array (or other windows).
Remove the first element of the previous window. 
If the removed element appeared only once, 
remove it from hM and decrease the distinct count, i.e. do “dist_count–“
else (appeared multiple times in hM), then decrement its count in hM
Add the current element (last element of the new window) 
If the added element is not present in hM, add it to hM and increase the distinct count, i.e. do “dist_count++”
Else (the added element appeared multiple times), increment its count in hM
//////////////////////////////////////////////////////////////////////////////
/ A Java program to count distinct elements in
// every window of size k
import java.util.HashMap;

class CountDistinctWindow {
	static void countDistinct(int arr[], int k)
	{
		// Creates an empty hashMap hM
		HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>();

		// Traverse the first window and store count
		// of every element in hash map
		for (int i = 0; i < k; i++)
			hM.put(arr[i], hM.getOrDefault(arr[i], 0) + 1);

		// Print count of first window
		System.out.println(hM.size());

		// Traverse through the remaining array
		for (int i = k; i < arr.length; i++) {

			// Remove first element of previous window
			// If there was only one occurrence
			if (hM.get(arr[i - k]) == 1) {
				hM.remove(arr[i - k]);
			}

			else // reduce count of the removed element
				hM.put(arr[i - k], hM.get(arr[i - k]) - 1);			

			// Add new element of current window
			// If this element appears first time,
			// set its count as 1,
			hM.put(arr[i], hM.getOrDefault(arr[i], 0) + 1);

			// Print count of current window
			System.out.println(hM.size());
		}
	}

	// Driver method
	public static void main(String arg[])
	{
		int arr[] = { 1, 2, 1, 3, 4, 2, 3 };
		int k = 4;
		countDistinct(arr, k);
	}
}
