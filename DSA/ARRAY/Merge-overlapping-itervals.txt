https://www.geeksforgeeks.org/merging-intervals/


////////////////////////////////////////////////////////////////////

A simple approach is to start from the first interval and compare it with all other intervals for overlapping,
if it overlaps with any other interval,
then remove the other interval from the list and merge the other into the first interval.
Repeat the same steps for remaining intervals after first.
This approach cannot be implemented in better than O(n^2) time.

////////////////////////////////////////////////////////////////////

An efficient approach is to first sort the intervals according to the starting time.
Once we have the sorted intervals, we can combine all intervals in a linear traversal.
The idea is, in sorted array of intervals,
if interval[i] doesnâ€™t overlap with interval[i-1],
then interval[i+1] cannot overlap with interval[i-1] 
because starting time of interval[i+1] must be greater than or equal to interval[i].
Following is the detailed step by step algorithm. 

////////////////////////////////////////////////////////////////////

1) Sort all intervals in increasing order of start time.
2) Traverse sorted intervals starting from first interval, 
   do following for every interval.
      a) If current interval is not first interval and it 
         overlaps with previous interval, then merge it with
         previous interval. Keep doing it while the interval
         overlaps with the previous one.         
      b) Else add current interval to output list of intervals.

///////////////////////////////////////////////////////////////////////////

//Interval class
class Interval {
int start;
int end;
public Interval(int start, int end) {
this.start = start;
this.end = end;
}
}
//Merge intervals
public class MergeIntervals {
public static List<Interval> mergeInterval(List<Interval> intervals) {
/*
If list has less than two elements,
then there is nothing to merge
*/
if(intervals.size() < 2) {
return intervals;
}
List<Interval> output = new ArrayList<>();
//Sort the interval on the basis of start attribute
Collections.sort(intervals, (a, b) -> Integer.compare(a.start, b.start));
//Take interval present at 0th element
Interval temp = intervals.get(0);
int start = temp.start;
int end = temp.end;
//Traverse a list
for(int i = 1; i < intervals.size(); i++) {
temp = intervals.get(i);
if(temp.start <= end) {
end = Math.max(end, temp.end);
} else {
output.add(new Interval(start, end));
start = temp.start;
end = temp.end;
}
}
output.add(new Interval(start, end));
return output;
}
public static void main(String[] args) {
List<Interval> input = new ArrayList<>();
input.add(new Interval(1, 4));
input.add(new Interval(2, 5));
input.add(new Interval(6, 9));
List<Interval> output = mergeInterval(input);
for(Interval result : output) {
System.out.println(result.start + " " + result.end);
}
}
}