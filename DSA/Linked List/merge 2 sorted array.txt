recursive approach:-
compare the first element of both arr nd return the smaller
for smaller.nxt compare smaller.next nd larger via recursion

class GFG
{
	public Node SortedMerge(Node A, Node B)
	{
	
		if(A == null) return B;
		if(B == null) return A;
		
		if(A.data < B.data)
		{
			A.next = SortedMerge(A.next, B);
			return A;
		}
		else
		{
			B.next = SortedMerge(A, B.next);
			return B;
		}
		
	}
}
-----------
Method 2 (Iterative)

Approach: This approach is very similar to the above recursive approach.
 

Traverse the list from start to end.
If the head node of second list lies in between two nodes of the first list, insert it there and make the next node of second list the head. Continue this until there is no node left in both lists, i.e. both the lists are traversed.
If the first list has reached end while traversing, point the next node to the head of second list.


// Java program to merge two sorted
// linked lists in-place.
class GfG {

	static class Node {
		int data;
		Node next;
	}

	// Function to create newNode in a linkedlist
	static Node newNode(int key)
	{
		Node temp = new Node();
		temp.data = key;
		temp.next = null;
		return temp;
	}

	// A utility function to print linked list
	static void printList(Node node)
	{
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	// Merges two lists with headers as h1 and h2.
	// It assumes that h1's data is smaller than
	// or equal to h2's data.
	static Node mergeUtil(Node h1, Node h2)
	{
		// if only one node in first list
		// simply point its head to second list
		if (h1.next == null) {
			h1.next = h2;
			return h1;
		}

		// Initialize current and next pointers of
		// both lists
		Node curr1 = h1, next1 = h1.next;
		Node curr2 = h2, next2 = h2.next;

		while (next1 != null && curr2 != null) {
			// if curr2 lies in between curr1 and next1
			// then do curr1->curr2->next1
			if ((curr2.data) >= (curr1.data) && (curr2.data) <= (next1.data)) {
				next2 = curr2.next;
				curr1.next = curr2;
				curr2.next = next1;

				// now let curr1 and curr2 to point
				// to their immediate next pointers
				curr1 = curr2;
				curr2 = next2;
			}
			else {
				// if more nodes in first list
				if (next1.next != null) {
					next1 = next1.next;
					curr1 = curr1.next;
				}

				// else point the last node of first list
				// to the remaining nodes of second list
				else {
					next1.next = curr2;
					return h1;
				}
			}
		}
		return h1;
	}

	// Merges two given lists in-place. This function
	// mainly compares head nodes and calls mergeUtil()
	static Node merge(Node h1, Node h2)
	{
		if (h1 == null)
			return h2;
		if (h2 == null)
			return h1;

		// start with the linked list
		// whose head data is the least
		if (h1.data < h2.data)
			return mergeUtil(h1, h2);
		else
			return mergeUtil(h2, h1);
	}

	// Driver code
	public static void main(String[] args)
	{
		Node head1 = newNode(1);
		head1.next = newNode(3);
		head1.next.next = newNode(5);

		// 1->3->5 LinkedList created

		Node head2 = newNode(0);
		head2.next = newNode(2);
		head2.next.next = newNode(4);

		// 0->2->4 LinkedList created

		Node mergedhead = merge(head1, head2);

		printList(mergedhead);
	}
}











-----------
iterative approach using a dummy node
The strategy here uses a temporary dummy node as the start of the result list. The pointer Tail always points to the last node in the result list, so appending new nodes is easy. 

The dummy node gives the tail something to point to initially when the result list is empty. This dummy node is efficient, since it is only temporary, and it is allocated in the stack. The loop proceeds, removing one node from either ‘a’ or ‘b’, and adding it to the tail. When 

We are done, the result is in dummy.next. 
/* Java program to merge two
sorted linked lists */
import java.util.*;

/* Link list node */
class Node
{
	int data;
	Node next;
	Node(int d) {data = d;
				next = null;}
}
	
class MergeLists
{
Node head;

/* Method to insert a node at
the end of the linked list */
public void addToTheLast(Node node)
{
	if (head == null)
	{
		head = node;
	}
	else
	{
		Node temp = head;
		while (temp.next != null)
			temp = temp.next;
		temp.next = node;
	}
}

/* Method to print linked list */
void printList()
{
	Node temp = head;
	while (temp != null)
	{
		System.out.print(temp.data + " ");
		temp = temp.next;
	}
	System.out.println();
}


// Driver Code
public static void main(String args[])
{
	/* Let us create two sorted linked
	lists to test the methods
	Created lists:
		llist1: 5->10->15,
		llist2: 2->3->20
	*/
	MergeLists llist1 = new MergeLists();
	MergeLists llist2 = new MergeLists();
	
	// Node head1 = new Node(5);
	llist1.addToTheLast(new Node(5));
	llist1.addToTheLast(new Node(10));
	llist1.addToTheLast(new Node(15));
	
	// Node head2 = new Node(2);
	llist2.addToTheLast(new Node(2));
	llist2.addToTheLast(new Node(3));
	llist2.addToTheLast(new Node(20));
	
	
	llist1.head = new Gfg().sortedMerge(llist1.head,
										llist2.head);
	llist1.printList();	
	
}
}

class Gfg
{
/* Takes two lists sorted in
increasing order, and splices
their nodes together to make
one big sorted list which is
returned. */
Node sortedMerge(Node headA, Node headB)
{
	
	/* a dummy first node to
	hang the result on */
	Node dummyNode = new Node(0);
	
	/* tail points to the
	last result node */
	Node tail = dummyNode;
	while(true)
	{
		
		/* if either list runs out,
		use the other list */
		if(headA == null)
		{
			tail.next = headB;
			break;
		}
		if(headB == null)
		{
			tail.next = headA;
			break;
		}
		
		/* Compare the data of the two
		lists whichever lists' data is
		smaller, append it into tail and
		advance the head to the next Node
		*/
		if(headA.data <= headB.data)
		{
			tail.next = headA;
			headA = headA.next;
		}
		else
		{
			tail.next = headB;
			headB = headB.next;
		}
		
		/* Advance the tail */
		tail = tail.next;
	}
	return dummyNode.next;
}
}



