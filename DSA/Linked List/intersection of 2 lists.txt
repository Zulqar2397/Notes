https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/


TRY METHOD 3

Method 1 (Use Hashing) 
Basically, we need to find a common node of two linked lists.
 So we hash all nodes of the first list and then check the second list. 
1) Create an empty hash set. 
2) Traverse the first linked list and insert all nodes’ addresses in the hash set. 
3) Traverse the second list. For every node check if it is present in the hash set.
 If we find a node in the hash set, return the node.

// Java program to get intersection point of two linked list
import java.util.*;
class Node {
	int data;
	Node next;
	Node(int d)
	{
		data = d;
		next = null;
	}
}
class LinkedListIntersect {
	public static void main(String[] args)
	{
		// list 1
		Node n1 = new Node(1);
		n1.next = new Node(2);
		n1.next.next = new Node(3);
		n1.next.next.next = new Node(4);
		n1.next.next.next.next = new Node(5);
		n1.next.next.next.next.next = new Node(6);
		n1.next.next.next.next.next.next = new Node(7);
		// list 2
		Node n2 = new Node(10);
		n2.next = new Node(9);
		n2.next.next = new Node(8);
		n2.next.next.next = n1.next.next.next;
		Print(n1);
		Print(n2);
		System.out.println(MegeNode(n1, n2).data);
	}

	// function to print the list
	public static void Print(Node n)
	{
		Node cur = n;
		while (cur != null) {
			System.out.print(cur.data + " ");
			cur = cur.next;
		}
		System.out.println();
	}
/////////////////////////////////////////////////////////////////////////////////////
	// function to find the intersection of two node
	public static Node MegeNode(Node n1, Node n2)
	{
		// define hashset
		HashSet<Node> hs = new HashSet<Node>();
		while (n1 != null) {
			hs.add(n1);
			n1 = n1.next;
		}
		while (n2 != null) {
			if (hs.contains(n2)) {
				return n2;
			}
			n2 = n2.next;
		}
		return null;
	}
/////////////////////////////////////////////////////////////////////////////////////
}


Method 2( 2-pointer technique ):

Using Two pointers : 

Initialize two pointers ptr1 and ptr2  at the head1 and  head2.
Traverse through the lists,one node at a time.
When ptr1 reaches the end of a list, then redirect it to the head2.
similarly when ptr2 reaches the end of a list, redirect it the head1.
Once both of them go through reassigning, they will be equidistant from 
 the collision point
If at any node ptr1 meets ptr2, then it is the intersection node.
After second iteration if there is no intersection node it returns NULL.

// JAVA program to print intersection of lists

import java.util.*;

class GFG{

/* Link list node */
static class Node {
	int data;
	Node next;
};
////////////////////////////////////////////////////////////////////////////////
// A utility function to return intersection node
static Node intersectPoint(Node head1, Node head2)
{
	// Maintaining two pointers ptr1 and ptr2
	// at the head of A and B,
	Node ptr1 = head1;
	Node ptr2 = head2;

	// If any one of head is null i.e
	// no Intersection Point
	if (ptr1 == null || ptr2 == null) {

		return null;
	}

	// Traverse through the lists until they
	// reach Intersection node
	while (ptr1 != ptr2) {

		ptr1 = ptr1.next;
		ptr2 = ptr2.next;

		// If at any node ptr1 meets ptr2, then it is
		// intersection node.Return intersection node.

		if (ptr1 == ptr2) {

			return ptr1;
		}
		/* Once both of them go through reassigning,
		they will be equidistant from the collision point.*/

		// When ptr1 reaches the end of a list, then
		// reassign it to the head2.
		if (ptr1 == null) {

			ptr1 = head2;
		}
		// When ptr2 reaches the end of a list, then
		// redirect it to the head1.
		if (ptr2 == null) {

			ptr2 = head1;
		}
	}

	return ptr1;
}
////////////////////////////////////////////////////////////////////////////////
// Function to print intersection nodes
// in a given linked list
static void print(Node node)
{
	if (node == null)
		System.out.print("null");
	while (node.next != null) {
		System.out.print(node.data+ ".");
		node = node.next;
	}
	System.out.print(node.data);
}

// Driver code
public static void main(String[] args)
{
	/*
	Create two linked lists

	1st Linked list is 3.6.9.15.30
	2nd Linked list is 10.15.30

	15 30 are elements in the intersection list
	*/

	Node newNode;
	Node head1 = new Node();
	head1.data = 10;
	Node head2 = new Node();
	head2.data = 3;
	newNode = new Node();
	newNode.data = 6;
	head2.next = newNode;
	newNode = new Node();
	newNode.data = 9;
	head2.next.next = newNode;
	newNode = new Node();
	newNode.data = 15;
	head1.next = newNode;
	head2.next.next.next = newNode;
	newNode = new Node();
	newNode.data = 30;
	head1.next.next = newNode;
	head1.next.next.next = null;
	Node intersect_node = null;

	// Find the intersection node of two linked lists
	intersect_node = intersectPoint(head1, head2);

	System.out.print("INTERSEPOINT LIST :");

	print(intersect_node);
}
}


Method 3(Using difference of node counts) 

Get count of the nodes in the first list, let count be c1.
Get count of the nodes in the second list, let count be c2.
Get the difference of counts d = abs(c1 – c2)
Now traverse the bigger list from the first node till d nodes
so that from here onwards both the lists have equal no of nodes
Then we can traverse both the lists in parallel till we come across a common node.
 (Note that getting a common node is done by comparing the address of the nodes)

// Java program to get intersection point of two linked list

class LinkedList {

	static Node head1, head2;

	static class Node {

		int data;
		Node next;

		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	/*function to get the intersection point of two linked
	lists head1 and head2 */
	int getNode()
	{
		int c1 = getCount(head1);
		int c2 = getCount(head2);
		int d;

		if (c1 > c2) {
			d = c1 - c2;
			return _getIntesectionNode(d, head1, head2);
		}
		else {
			d = c2 - c1;
			return _getIntesectionNode(d, head2, head1);
		}
	}

	/* function to get the intersection point of two linked
	lists head1 and head2 where head1 has d more nodes than
	head2 */
////////////////////////////////////////////////////////////////////////////////
	int _getIntesectionNode(int d, Node node1, Node node2)
	{
		int i;
		Node current1 = node1;
		Node current2 = node2;
		for (i = 0; i < d; i++) {
			if (current1 == null) {
				return -1;
			}
			current1 = current1.next;
		}
		while (current1 != null && current2 != null) {
			if (current1.data == current2.data) {
				return current1.data;
			}
			current1 = current1.next;
			current2 = current2.next;
		}

		return -1;
	}
////////////////////////////////////////////////////////////////////////////////
	/*Takes head pointer of the linked list and
	returns the count of nodes in the list */
	int getCount(Node node)
	{
		Node current = node;
		int count = 0;

		while (current != null) {
			count++;
			current = current.next;
		}

		return count;
	}

	public static void main(String[] args)
	{
		LinkedList list = new LinkedList();

		// creating first linked list
		list.head1 = new Node(3);
		list.head1.next = new Node(6);
		list.head1.next.next = new Node(9);
		list.head1.next.next.next = new Node(15);
		list.head1.next.next.next.next = new Node(30);

		// creating second linked list
		list.head2 = new Node(10);
		list.head2.next = new Node(15);
		list.head2.next.next = new Node(30);

		System.out.println("The node of intersection is " + list.getNode());
	}
}


