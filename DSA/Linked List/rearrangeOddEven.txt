https://www.geeksforgeeks.org/rearrange-a-linked-list-such-that-all-even-and-odd-positioned-nodes-are-together/

https://www.geeksforgeeks.org/alternate-odd-even-nodes-singly-linked-list/

The below program maintains two pointers ‘odd’ and ‘even’ for current nodes at odd and even positions respectively.
We also store the first node of even linked list so that we can attach the even list at the end of odd list 
after all odd and even nodes are connected together in two different lists. 

//////////////////////////////////////////////////////////////////////////

// Java program to rearrange a linked list
// in such a way that all odd positioned
// node are stored before all even positioned nodes
class GfG
{

// Linked List Node
static class Node
{
	int data;
	Node next;
}

// A utility function to create a new node
static Node newNode(int key)
{
	Node temp = new Node();
	temp.data = key;
	temp.next = null;
	return temp;
}
//////////////////////////////////////////////////////////////////////////
// Rearranges given linked list
// such that all even positioned
// nodes are before odd positioned.
// Returns new head of linked List.
static Node rearrangeEvenOdd(Node head)
{
	// Corner case
	if (head == null)
		return null;

	// Initialize first nodes of even and
	// odd lists
	Node odd = head;
	Node even = head.next;

	// Remember the first node of even list so
	// that we can connect the even list at the
	// end of odd list.
	Node evenFirst = even;

	while (1 == 1)
	{
		// If there are no more nodes,
		// then connect first node of even
		// list to the last node of odd list
		if (odd == null || even == null ||
						(even.next) == null)
		{
			odd.next = evenFirst;
			break;
		}

		// Connecting odd nodes
		odd.next = even.next;
		odd = even.next;

		// If there are NO more even nodes
		// after current odd.
		if (odd.next == null)
		{
			even.next = null;
			odd.next = evenFirst;
			break;
		}

		// Connecting even nodes
		even.next = odd.next;
		even = odd.next;
	}
	return head;
}
//////////////////////////////////////////////////////////////////////////

// A utility function to print a linked list
static void printlist(Node node)
{
	while (node != null)
	{
		System.out.print(node.data + "->");
		node = node.next;
	}
	System.out.println("NULL") ;
}

// Driver code
public static void main(String[] args)
{
	Node head = newNode(1);
	head.next = newNode(2);
	head.next.next = newNode(3);
	head.next.next.next = newNode(4);
	head.next.next.next.next = newNode(5);

	System.out.println("Given Linked List");
	printlist(head);

	head = rearrangeEvenOdd(head);

	System.out.println("Modified Linked List");
	printlist(head);
}
}
//////////////////////////////////////////////////////////////////////////


//APPROACH-1 (APPROACH-2 below)


1.two iterations 1 to find count and numof ops 
2.head in start end in end
3.temp will be jump pointer start se
4.end.next= temp.next, temp.nxt=tmp.nxt.nxt , end.nxt.nxt = null
4.tmp++, end++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        //Boundary cases
        if(!head)
            return head;
        
        ListNode *end = head;
        int counter = 0;
        while(end->next)
        {    end = end->next;   counter +=1;    }
        
        counter = counter&1?(counter/2)+1:counter/2;
        ListNode *temp = head;
        while(counter--)
        {
            end->next = temp->next;
            temp->next = temp->next->next;
            end->next->next = NULL;
            temp = temp->next;
            end = end->next;
        }
        
        return head;
    }
};

//APPROACH-2

2 head  and 2 pointers
oh eh op ep
o.nxt = o.nxt.nxt
e.nxt = e.nxt.nxt
o=o.nxt
e=e.nxt
till e=null or e.next = null
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        //Boundary cases
        if(!head)
            return head;
        
        ListNode *odd = head;
        ListNode *even = head->next;
        ListNode *odd_head = head;
        ListNode *even_head = head->next;
        
        while(even && even->next)
        {
            odd->next = odd->next->next;
            even->next = even->next->next;
            odd = odd->next;
            even = even->next;
        }
        odd->next = even_head;        
        return head;
    }
};