Create the copy of node 1 and insert it between node 1 & node 2 in the original Linked List, create a copy of 2 and insert it between 2 & 3. Continue in this fashion, add the copy of N after the Nth node 
 
Now copy the random link in this fashion 
 Orignal ka random and copy ka random same he hoga
 original->next->random= original->random->next;  /*TRAVERSE 
TWO NODES*/
This works because original->next is nothing but a copy of the original and Original->random->next is nothing but a copy of the random. 
 
Now restore the original and copy linked lists in this fashion in a single loop. 

original->next = original->next->next;
     copy->next = copy->next->next;
Ensure that original->next is NULL and return the cloned list

// Java program to clone a linked list with next
// and arbit pointers in O(n) time
class GfG {

	// Structure of linked list Node
	static class Node {
		int data;
		Node next, random;
		Node(int x)
		{
			data = x;
			next = random = null;
		}
	}

	// Utility function to print the list.
	static void print(Node start)
	{
		Node ptr = start;
		while (ptr != null) {
			System.out.println("Data = " + ptr.data
							+ ", Random = "
							+ ptr.random.data);
			ptr = ptr.next;
		}
	}

	// This function clones a given
	// linked list in O(1) space
	static Node clone(Node start)
	{
		Node curr = start, temp = null;

		// insert additional node after
		// every node of original list
		while (curr != null) {
			temp = curr.next;

			// Inserting node
			curr.next = new Node(curr.data);
			curr.next.next = temp;
			curr = temp;
		}
		curr = start;

		// adjust the random pointers of the
		// newly added nodes
		while (curr != null) {
			if (curr.next != null)
				curr.next.random = (curr.random != null)
									? curr.random.next
									: curr.random;

			// move to the next newly added node by
			// skipping an original node
			curr = curr.next.next;				
		}

		Node original = start, copy = start.next;

		// save the start of copied linked list
		temp = copy;

		// now separate the original list and copied list
		while (original != null) {
			original.next =original.next.next;

		copy.next = (copy.next != null) ? copy.next.next
											: copy.next;
			original = original.next;
			copy = copy.next;
		}
		return temp;
	}

	// Driver code
	public static void main(String[] args)
	{
		Node start = new Node(1);
		start.next = new Node(2);
		start.next.next = new Node(3);
		start.next.next.next = new Node(4);
		start.next.next.next.next = new Node(5);

		// 1's random points to 3
		start.random = start.next.next;

		// 2's random points to 1
		start.next.random = start;

		// 3's and 4's random points to 5
		start.next.next.random = start.next.next.next.next;
		start.next.next.next.random
			= start.next.next.next.next;

		// 5's random points to 2
		start.next.next.next.next.random = start.next;

		System.out.println("Original list : ");
		print(start);

		System.out.println("Cloned list : ");
		Node cloned_list = clone(start);
		print(cloned_list);
	}
}

-------------------
approach 2 hashing leser approach
The idea is to use Hashing. Below is algorithm. 
1. Traverse the original linked list and make a copy in terms of data. 
2. Make a hash map of key value pair with original linked list node and copied linked list node. 
3. Traverse the original linked list again and using the hash map adjust the next and random reference of cloned linked list nodes.
Below is the implementation of above approach.

// Java program to clone a linked list with random pointers
import java.util.HashMap;
import java.util.Map;

// Linked List Node class
class Node
{
	int data;//Node data
	Node next, random;//Next and random reference

	//Node constructor
	public Node(int data)
	{
		this.data = data;
		this.next = this.random = null;
	}
}

// linked list class
class LinkedList
{
	Node head;//Linked list head reference

	// Linked list constructor
	public LinkedList(Node head)
	{
		this.head = head;
	}

	// push method to put data always at the head
	// in the linked list.
	public void push(int data)
	{
		Node node = new Node(data);
		node.next = this.head;
		this.head = node;
	}

	// Method to print the list.
	void print()
	{
		Node temp = head;
		while (temp != null)
		{
			Node random = temp.random;
			int randomData = (random != null)? random.data: -1;
			System.out.println("Data = " + temp.data +
							", Random data = "+ randomData);
			temp = temp.next;
		}
	}

	// Actual clone method which returns head
	// reference of cloned linked list.
	public LinkedList clone()
	{
		// Initialize two references, one with original
		// list's head.
		Node origCurr = this.head, cloneCurr = null;

		// Hash map which contains node to node mapping of
		// original and clone linked list.
		Map<Node, Node> map = new HashMap<Node, Node>();

		// Traverse the original list and make a copy of that
		// in the clone linked list.
		while (origCurr != null)
		{
			cloneCurr = new Node(origCurr.data);
			map.put(origCurr, cloneCurr);
			origCurr = origCurr.next;
		}

		// Adjusting the original list reference again.
		origCurr = this.head;

		// Traversal of original list again to adjust the next
		// and random references of clone list using hash map.
		while (origCurr != null)
		{
			cloneCurr = map.get(origCurr);
			cloneCurr.next = map.get(origCurr.next);
			cloneCurr.random = map.get(origCurr.random);
			origCurr = origCurr.next;
		}

		//return the head reference of the clone list.
		return new LinkedList(map.get(this.head));
	}
}

// Driver Class
class Main
{
	// Main method.
	public static void main(String[] args)
	{
		// Pushing data in the linked list.
		LinkedList list = new LinkedList(new Node(5));
		list.push(4);
		list.push(3);
		list.push(2);
		list.push(1);

		// Setting up random references.
		list.head.random = list.head.next.next;
		list.head.next.random =
			list.head.next.next.next;
		list.head.next.next.random =
			list.head.next.next.next.next;
		list.head.next.next.next.random =
			list.head.next.next.next.next.next;
		list.head.next.next.next.next.random =
			list.head.next;

		// Making a clone of the original linked list.
		LinkedList clone = list.clone();

		// Print the original and cloned linked list.
		System.out.println("Original linked list");
		list.print();
		System.out.println("\nCloned linked list");
		clone.print();
	}
}

