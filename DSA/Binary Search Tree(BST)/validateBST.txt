https://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/

METHOD 2 (Correct but not efficient) 
For each node, 
check if max value in left subtree is smaller than the node
and min value in right subtree greater than the node. 
/* Returns true if a binary tree is a binary search tree */
int isBST(Node node)
{
if (node == null)
	return 1;
	
/* false if the max of the left is > than us */
if (node.left != null && maxValue(node.left) >= node.data)
	return 0;
	
/* false if the min of the right is <= than us */
if (node.right != null && minValue(node.right) <= node.data)
	return 0;

/* false if, recursively, the left or right is not a BST */
if (!isBST(node.left) || !isBST(node.right))
	return 0;
	
/* passing all that, it's a BST */
return 1;
}

//.............///////////////////////////////////////////////
METHOD 3 (Correct and Efficient): 
Method 2 above runs slowly since it traverses over some parts of the tree many times.
A better solution looks at each node only once. 
The trick is to write a utility helper function
 isBSTUtil(struct node* node, int min, int max) that traverses down the tree 
keeping track of the narrowing min and max allowed values as it goes, 
looking at each node only once.\
 The initial values for min and max should be INT_MIN and INT_MAX â€” they narrow from there. 

Note: This method is not applicable if there are duplicate elements with value INT_MIN or INT_MAX.

//Java implementation to check if given Binary tree
//is a BST or not

/* Class containing left and right child of current
node and key value*/
class Node
{
	int data;
	Node left, right;

	public Node(int item)
	{
		data = item;
		left = right = null;
	}
}

public class BinaryTree
{
	//Root of the Binary Tree
	Node root;

	/* can give min and max value according to your code or
	can write a function to find min and max value of tree. */

	/* returns true if given search tree is binary
	search tree (efficient version) */
	boolean isBST() {
		return isBSTUtil(root, Integer.MIN_VALUE,
							Integer.MAX_VALUE);
	}

	/* Returns true if the given tree is a BST and its
	values are >= min and <= max. */
	boolean isBSTUtil(Node node, int min, int max)
	{
		/* an empty tree is BST */
		if (node == null)
			return true;

		/* false if this node violates the min/max constraints */
		if (node.data < min || node.data > max)
			return false;

		/* otherwise check the subtrees recursively
		tightening the min/max constraints */
		// Allow only distinct values
		return (isBSTUtil(node.left, min, node.data-1) &&
				isBSTUtil(node.right, node.data+1, max));
	}

	/* Driver program to test above functions */
	public static void main(String args[])
	{
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(4);
		tree.root.left = new Node(2);
		tree.root.right = new Node(5);
		tree.root.left.left = new Node(1);
		tree.root.left.right = new Node(3);

		if (tree.isBST())
			System.out.println("IS BST");
		else
			System.out.println("Not a BST");
	}
}

