Given a binary tree and a key(node) value, find the floor and ceil value for that particular key value.

Floor Value Node: Node with the greatest data lesser than or equal to the key value. 
Ceil Value Node: Node with the smallest data larger than or equal to the key value.

Algorithm: 

Imagine we are moving down the tree, and assume we are root node. 
The comparison yields three possibilities,

A) Root data is equal to key. We are done, root data is ceil value.

B) Root data < key value, certainly the ceil value can't be in left subtree. 
   Proceed to search on right subtree as reduced problem instance.

C) Root data > key value, the ceil value may be in left subtree. 
   We may find a node with is larger data than key value in left subtree, 
   if not the root itself will be ceil node.


// Java program to find ceil of a given value in BST

class Node {

	int data;
	Node left, right;

	Node(int d)
	{
		data = d;
		left = right = null;
	}
}

class BinaryTree {

	Node root;

	// Function to find ceil of a given input in BST.
	// If input is more than the max key in BST,
	// return -1
	int Ceil(Node node, int input)
	{

		// Base case
		if (node == null) {
			return -1 or Integer.MIN_VALUE; 
           							 //for floor return Integer.MAX_VALUE
		}

		// We found equal key
		if (node.data == input) {    //COMMON
			return node.data;
		}

		// If root's key is smaller,		  |//if root.data>input floor must be in right subtree
		// ceil must be in right subtree          |if(node.data>input)
							  |return floor( node.left,input)
							  |	
		if (node.data < input) {		  |//else the floor maybe in the right subtrr	
			return Ceil(node.right, input);	  |int floor = floor( node.right,input)
		}					  |return (floorValue<=input)?floorValue : node.data
							  |
		// Else, either left subtree or root	  |}
		// has the ceil value			  |
		int ceil = Ceil(node.left, input);	  |
							  |
		return (ceil >= input) ? ceil : node.data;|
	}						  |

	// Driver Code
	public static void main(String[] args)
	{
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(8);
		tree.root.left = new Node(4);
		tree.root.right = new Node(12);
		tree.root.left.left = new Node(2);
		tree.root.left.right = new Node(6);
		tree.root.right.left = new Node(10);
		tree.root.right.right = new Node(14);
		for (int i = 0; i < 16; i++) {

			System.out.println(i + " " + tree.Ceil(tree.root, i));
		}
	}
}



